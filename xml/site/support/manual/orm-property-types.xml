<?xml version="1.0" encoding="UTF-8"?>
<!--
	* ***********************************************************************************************
	*
	* Phoebius Framework
	*
	* **********************************************************************************************
	*
	* Copyright (c) 2009 phoebius.org
	*
	* All rights reserved.
	*
	*************************************************************************************************
-->

<!DOCTYPE document SYSTEM "../../../../dtd/document.dtd">

<document>
	<title>ORM Type System</title>
	<chapters>
		<chapter>
			<p> Each ORM-related entity (aka a persistent object) may have properties of various
				types. </p>
			<p> An entity <link to="/support/api/classOrmPropertyType.html">property type</link>
				abstraction is the key concept of Phoebius ORM layer. It provides mapping between
				entity property (a class or a native value) and the database cells. </p>
			<p> You may define a property type that maps the objects of any complexity, either a
				primitive or a composite type, or even a reference to other entity. </p>
			<p>
				Right now there are several types you may assigned as property mapper.
			</p>
			<p> Primitive types represent native PHP values. They are treated as fundamental and
				thus used as the base for other property types. All these types are defined by the
				<link to="/support/api/classDBType.html">
					<code>DBType</code>
				</link> class constants. To use them just set the value of the constant you need to
				use: 
				<code-block title="$app/var/domain.xml" lang="xml"><![CDATA[
...
<property name="id" type="uint32" />
<property name="text" type="varchar" size="255" />
<property name="cost" type="currency" precision="12" scale="9" />
...
]]></code-block> 
				Primitive types may be set with the predefined attributes that will be
				passed to: <ul>
					<li>
						<code>size</code> attribute defines the size of the type; it may be applied
						to <code>varchar</code>, <code>char</code> and <code>binary</code> primitive
						types </li>
					<li>
						<code>precision</code> and <code>scale</code> attributes may be applied to
						<code>currency</code>, <code>decimal</code> and <code>float</code> types
					</li>
				</ul>
			</p>
			<p> Types can handle boxable primitives. This covers case when the native PHP value
				should be wrapped by the class which exposes various helper methods to handle the
				type. To do this, you may specify the class which implements <link
					to="/support/api/interfaceIOrmPropertyAssignable.html">
					<code>IOrmPropertyAssignable</code>
				</link> or <link to="/support/api/interfaceIBoxable.html">
					<code>IBoxable</code>
				</link> interfaces. The first one provides a worker that is responsible for mapping
				the primitive; the second one provides an interface for explicit mapping. <link
					to="/support/api/classDate.html">
					<code>Date</code>
				</link> class is the good example. </p>
			<p>
				Other entities may be the types too. In this case a one-tone association is build
			</p>
			<p>	
				You may implement your own types easily. All you need is to implement 
				<link to="/support/api/classOrmPropertyType.html">
					<code>OrmPropertyType</code>
				</link>, provide a public constructor and set the name of the type in the definition:
				<code-block><![CDATA[
class MyPropertyType extends OrmPropertyType 
{
	function __construct($typeParam1, $typeParam2){}
	...
}
]]></code-block>
				<code-block><![CDATA[
<property name="myCustomProperty" type="MyPropertyType">
	<param name="typeParam1" value="1">
	<param name="typeParam2" value="2">
</property>
]]></code-block>
			</p>
		</chapter>
	</chapters>
</document>
