<?xml version="1.0" encoding="UTF-8"?>
<!--
 * ***********************************************************************************************
 *
 * Phoebius Framework
 *
 * **********************************************************************************************
 *
 * Copyright (c) 2009 Scand Ltd.
 *
 * All rights reserved.
 *
 *************************************************************************************************
-->

<!DOCTYPE document SYSTEM "../../../dtd/document.dtd">

<document>
	<title>A Beginnersâ€™ Guide</title>
	<chapters>
		<chapter title="Introduction">
			<p> First of all, <i>welcome</i> to Phoebius framework. We see Phoebius as something
				that developers needed to produce complex web-services natively featured everything
				that well-known gurus of software development advised to all of us: principles of
				cohesion and decoupling by Steve McConnell, patterns by Martin Fowler, and so on and
				so forth. All this makes a resulting product more stable and less obscured, thus
				minimizing costs of development, test and maintenance and delivering the pleasure to
				developers, project managers and customers. </p>
			<p> Phoebius framework is the best choice for the basis of long-run web applications
				that meant to be scalable enough to meet the requirements of extremely-changing real
				world. </p>
			<p> In this tutorial we will develop a classic weblog, introducing you almost every
				package of the framework and how it makes the life of the developer easier. </p>
		</chapter>

		<chapter title="Preparing the Environment">
			<p> After <link to="/download.html">downloading</link> and application stub and
				extracting the Phoebius framework source to the corresponding directory, consider
				that <code>/www</code> is mapped as web-server root and <code>/tmp</code> has enough
				permissions for writing. </p>
			<p> Inside this tutorial we consider that an absolute path to our application is
				<code>$app</code> (and it is mapped to the root of an application stub), and a path
				to the framework core is <code>$base</code> (that points to the
				<code>/phoebius</code> directory). Of course, you can locate them in any relation:
				<code>$app</code> can be inside <code>$base</code> and <code>$base</code> can be
				inside <code>$app</code>; the only requirement is the correct absolute path to the
				init script (that is located at <code>$base/etc/app.init.php</code>). </p>
			<p> A typical application has the following structure: <code-block><![CDATA[
/ (aka $app)
	/cfg
		/default
			/config.php
	/etc
		/config.php
	/lib
	/phoebuis (aka $base)
	/tmp
	/var
	/views
	/www
		/index.php
]]></code-block>
			</p>
			<p> The bootstrapping process of such application is the following: <ol>
					<li>the incoming request is routed by a web-server to a file called
						front-controller (it is <code>$app/www/index.php</code> by default, but this
						script can be located anywhere you like - just assume that you have
						specified the correct absolute paths to an init-script);</li>
					<li>front-controller loads the framework's init-script
						<code>$base/etc/app.init.php</code>;</li>
					<li>front-controller loads the application config
						<code>$app/etc/config.php</code>. An application config prepares everything
						that does not depend on an environment where the application runs, e.g. a
						custom path to a library classes (by default it is
						<code>$app/lib:$app/var/lib</code>);</li>
					<li>front-controller loads the host config (located at
						<code>$app/cfg/&lt;slot name&gt;/config.php</code>). A host config
						can differ over different environments (e.g. test, production, development,
						etc), therefore it defines a host preset (the verbosity of errors, and
						more), stores a database connection parameters, tunes a web-server and does
						much more. The host configs are aggregated into the application slots. The
						name of an application slot is determined from an environment variable
						called <code>PHOEBIUS_APP_SLOT</code>. If not defined, the "default" slot is
						used.</li>
				</ol>
			</p>
			<p>For our simple blog application, all we need is a single database connection, so our
				application config can be left untouched, and the default host config
				(<code>$app/cfg/default/config.php</code>) can look similar to this: <code-block
					lang="php"><![CDATA[
<?

	define ('APP_SLOT_CONFIGURATION', SLOT_PRESET_DEVELOPMENT);

	DBPool::add(
		'default', 
		PgSqlDB::create()
			->setHost('localhost')
			->setUser('postgres')
			->setPassword('postgres')
			->setName('blog_db')
	);

?>]]></code-block> Here we have specified a development preset of the host (which maximizes the
				application feedback by an error verbosity an detailed logging) and have defined a
				default PostgreSQL database (you can specify MySQL swimmingly because the Phoebius
				database abstraction layer uses the ANSI-SQL-unified query builder, so you don't
				need to write SQL queries manually). </p>
		</chapter>

		<chapter title="Defining a Project Domain">
			<p> A development of an application starts with describing the domain with an XML
				schema, which is then translated to an internal representation (i.e. to a graph of
				internal objects), called "ORM domain". ORM domain holds the information regarding
				the application entities, mappings between entities and database schemas, and much
				more. </p>
			<p> So let's define the essences of our application. Our simple weblog is represented by
				posts and comments. A Post contains the title, the text, the date, and the set of
				Comments left to the post. A Comment contains the author, the text and the post this
				comment is assigned to, and the time when the comment was published. In other words,
				we have a one-to-many relation. Now let our framework know about our domain.
				Firstly, write down the definition in a simple XML schema located at
				<code>$app/var/schema.xml</code>: <code-block lang="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE domain SYSTEM "../phoebius/share/Orm/Domain/Meta/Xml/abstract.dtd">

<domain db-schema="default">
	<entities>
		<entity name="Post">
			<properties>
				<identifier />
				<property name="title" type="String" />
				<property name="text" type="String" />
				<property name="date" type="Date" />
				
				<container name="comments" type="Comment" />
			</properties>
		</entity>
		<entity name="Comment">
			<properties>
				<identifier />
				<property name="author" type="String" />
				<property name="text" type="String" />
				<property name="post" type="Post" />
				<property name="time" type="Timestamp" />
			</properties>
		</entity>
	</entities>
</domain>
]]></code-block> For more information, refer to <link
					to="http://git.phoebius.org/?p=phoebius.git;a=blob;f=share/Orm/Domain/Meta/Xml/abstract.dtd;h=e2f654545eecdb3997aa8b3170f286344d41fad1;hb=e96ebe021c8ad6c7eddc989d3cf3e51f4ba95b1d"
					>/share/Orm/Domain/Meta/Xml/abstract.dtd</link>. </p>
			<p> Then we tell the framework to produce the code according to the definition, by
				calling the framework generator via the console and passing the absolute path to the
				directory where the application resides: <code-block lang="bash"><![CDATA[
$ php $base/bin/make.php $app
]]></code-block> The real-world example: <code-block lang="bash"><![CDATA[	
$ php /www/phoebius.org/phoebius/bin/make.php /www/phoebius.org
]]></code-block></p>
			<p> Now you have a fresh set of autogenerated classes and files, that represent a
				high-level abstraction over database schemas and framework internals. The most
				important are: <ul>
					<li><code>$app/lib/Domain/Post.class.php</code>, the class representing the Post
						entity;</li>
					<li><code>$app/lib/Domain/Comment.class.php</code>, the class representing the
						Comment entity; </li>
					<li><code>$app/var/db/default.sql</code>, a SQL schema produced for the RDBMS
						driver you have chosen in a host config and already queried against it. Push
						it to the database you use.</li>
				</ul>
			</p>
		</chapter>

		<chapter title="Routing the requests">
			<p> Phoebius has a powerful routing package, which can route requests even using the
				complex conditions and mapping variables to types. Consider, that our blog requires
				to handle the following types of requests: <ul>
					<li><code>/</code> -- the front page</li>
					<li><code>/?skip=&lt;skip_count&gt;</code> -- the list of previous posts
						starting with <code>skip_count</code>, where <code>skip_count</code> is
						unsigned integer</li>
					<li><code>/post/&lt;post_id&gt;</code> -- a separate page containing
						post (identified by the <code>post_id</code>) with associated comments</li>
				</ul>
			</p>
			<p> To route these requests we need to create a router. The simplest way to do that is
				to create a class that implements a framework's ChainedRouter. Let's name it
				BlogRouter and locate it at our application library: <code-block lang="php"
					title="$app/lib/BlogRouter.class.php"><![CDATA[
class BlogRouter extends ChainedRouter
{
	function __construct()
	{
		$this->setDefaultDispatcher(new MvcDispatcher());
		
		$this->fillRoutes();
	}
	
	protected function fillRoutes()
	{
		$this->route(
			'skip-posts',
			'/?skip',
			array('controller' => 'Blog', 'action' => 'skipPost') 
		);
		
		$this->route(
			'show-post',
			'/post/:id',
			array('controller' => 'Blog', 'action' => 'showPost')
		);
		
		$this->route(
			'front-page',
			'/',
			array('controller' => 'Blog', 'action' => 'frontPage')
		);
	}
}
					]]></code-block>
			</p>
			<p> As we are planning to use Mvc to handle the requests, we set an MvcDispatcher as the
				default route dispatcher. Dispatcher is an application layer that is responsible for
				passing the request to the corresponding handler.</p>
			<p>ChainerRouter uses natural prioritizing strategy: the firstly-added rule has higher
				priority than the last one. That's why the route for front page is defined at the
				end of the table as it uses less greedy set of rules. </p>
		</chapter>

		<chapter title="Handling requests with actions">

			<p> In Mvc context, an action is a procedure that is responsible for handling the
				request and producing the result. Usually, action is a method of the controller
				class. Our routing policy defined below specifies requests that should be dispatched
				by MvcDispatcher and handled by the "Blog" controller. Therefore we define a class
				BlogController with the following actions (consider the naming notation defined by
				the base ActionBasedController class): <code-block lang="php"
					title="$app/lib/Mvc/Controllers/BlogController.class.php"><![CDATA[
class BlogController extends ActionBasedController
{
	/**
	* Request: /
	* @return IActionResult
	*/
	function action_frontPage()
	{
	}
	
	/**
	* Request: /?skip=N
	* @return IActionResult
	*/
	function action_skipPosts(Integer $skip)
	{
	}
	
	/**
	* Request: /post/:id
	* @return IActionResult
	*/
	function action_showPost(Integer $id)
	{
	}
}
				]]></code-block>
			</p>
			<p> Each action handles the corresponding request, if matched. Noteworthy that
				end-developers should not care about incoming parameter types: the framework
				internals checks the compatibility of the request by itself. For example, the
				request <code>/?skip=20</code> will be passed to
				<code>BlogController::action_skipPosts()</code> but <code>/?skip=abc</code> won't.
				Integer here is the <link to="/support/api/classInteger.html">defined type</link>.
				Future releases will expose this functionality and will be able to treat incoming
				variables as ORM-related entity property identifiers, obtaining identified entities
				from the database. </p>

		</chapter>
		<chapter title="Applying a business logic">

			<p> Now it is time to fill our actions with business logic. We will do this for every
				action that handles the request. </p>
			<p> The front page is simply a page with the latest posts. Therefore we can just make an
				internal redirection to an action that handles skip-posts request skipping zero
				posts: <code-block lang="php"><![CDATA[
function action_frontPage()
{
	return $this->action_skipPosts(new Integer(0));
}
]]></code-block> Action, that fetches the list of Post object, uses simple criteria over the entity
				query language wrapper -- an <link to="/support/api/classEntityQuery.html"
					>EntityQuery</link> class, and puts this list and the number of skipped posts to
				a model (a transport between action and view) and return the name of the view, that
				is automatically resolved by the action invoker. Notice, that we do not mix action's
				business logic with any presentation logic: we pass the result of business logic
				away to a view, which itself is responsible for presentation: <code-block lang="php"><![CDATA[
function action_skipPosts(Integer $skip)
{
	$list = 
		Post::query()
			->setOffset($skip->getValue())
			->setLimit(25)
			->getList();
	);
	
	return $this->view(
		'posts',
		array(
			'posts' => $list,
			'skip' => (string) $skip
		)
	);
}						
]]></code-block>
			</p>

			<p> An action for the page with a separate Post is simple too. We access the Post object
				by the specified ID and then obtain all the comments for the Post using the <link
					to="/support/api/classEntityQuery.html">EntityQuery</link> criteria: <code-block
					lang="php"><![CDATA[
function action_showPost(Integer $id)
{
	$post = Post::dao()->getEntityById((string) $id);
	$comments = 
		Comment::query()
			->where(Expression::eq('post', (string) $id))
			->getList();
			
	return $this->view(
		'post',
		array(
			'post' => $post,
			'comments' => $comments
		)
	);
}						
]]></code-block> Note that we reference to the name of the Comment object property ("post"), no
				matter how the database column is named. </p>
		</chapter>
		<chapter title="Processing a resulting content">

			<p>We have created actions that only apply a business logic, but don't care about the
				presentation, because in modern three-tier applications we should divide the
				business and the presentation logic. The result of an action (a model, that itself
				represents a produced data) is passed to a view. A view is a plain script that
				produces the markup and injects the passed data within this markup.</p>
			<p> A Phoebius <link to="/support/api/group__UI.html">UI</link> package is a view engine
				that offers a wide range of features for easy management of a huge number of
				different views. It defines three different types of views: <ol>
					<li>Master page view</li>
					<li>Content page view</li>
					<li>Control view</li>
				</ol> Using these views you can create complex view hierarchies, make view result
				substitutions, and even support a compliance between the script and a class written
				exclusively for the view or set of views (a "code behind" feature, introduced by
				ASP.NET, so that the template helpers are introduced within the classes and nowhere
				else). Master page view defines a skeleton of a unified website page (e.g. the
				header, the footer, the menu and the place for page content). Content page view
				itself represents a a separate page, and can be used as standalone template or as a
				part of master page. Control view works similar to a content page view except that
				control can have a parent view thus inheriting the model. </p>
			<p>For our simple weblog we need to create a common master page, three content pages
				(the first is for the list of posts; the second is for the select post with comments
				left to it, and the third one is 404 page) and one control page for composing a
				menu. <code-block lang="php" title="$app/views/master.view.php"><![CDATA[

...static header...

<?

$this->renderPartial('menu');

$this->getDefaultContent();

?>
...static footer...
]]></code-block>
				<code-block lang="php" title="$app/views/posts.view.php"><![CDATA[
<?

$this->setMaster('master');

?>
<h1>Blog posts</h1>
<?

foreach ($this->posts as $post) { ?>
    <h1><?=$post->getTitle()?> <small><?=$post->getDate()->toFormattedString()?></small></h1>
    <br />
    <?=$post->getText()?>
    <hr />
<? }

?>							
]]></code-block><code-block lang="php" title="$app/views/post.view.php"><![CDATA[
<?

$this->setMaster('master');

?>
<h1><?=$this->post->getTitle()</h1>
<?=$this->post->getText()?>							
]]></code-block>
			</p>
			<p> Standard Phoebius distribution requires views to be located inside $app/views
				directory. The naming pattern is <code>&lt;view_name&gt;.view.php</code>. </p>

		</chapter>
		<chapter title="Conclusion">
			<p> Phoebius framework is modern solution intended to quick building of applications
				that require self-documenting stratified code of high quality. </p>
		</chapter>
	</chapters>
</document>
