<?xml version="1.0" encoding="UTF-8"?>
<!--
 * ***********************************************************************************************
 *
 * Phoebius Framework
 *
 * **********************************************************************************************
 *
 * Copyright (c) 2009 phoebius.org
 *
 * All rights reserved.
 *
 *************************************************************************************************
-->

<!DOCTYPE document SYSTEM "../../dtd/document.dtd">

<document>
	<title>Featured Highlights</title>
	<chapters>
		<chapter title="Unified infrastructure">
			
			<subchapter title="Standardizing the development process">
				<p>Phoebius framework defines a <b>common filesystem layout</b> and coding style, so
					applications based on framework are meant to look similar and thus application
					maintainability decreases.</p>
			</subchapter>

			<subchapter title="Predictable control flow">
				<p> An application logic is <b>exception-centric</b>: every PHP error/warning/notice
					is replaced the <link
						to="/support/api/d8/d8a/classExecutionContextException.html"
						>exception</link>. Such a concept helps to avoid tons of unnoticeable
					inconsistencies (like an access to an undefined index of an array, etc) and thus
					making every usage of an internal PHP function strong enough and unambiguous. Of
					course, this functionality can be explicitly turned off when using a third-party
					libraries that does not know about the exceptions or ignore notices and
					warnings. </p>
				<p> Though PHP is weakly-typed language, Phoebius framework propagates <b>strong
						typing</b> wherever possible to provide more stable and predictable code.
					Explicit and unambiguous type hints are specified in most of methods'
					signatures. Moreover, explicit type hints and type checks are used even for
					primitive build-in types (<link to="/support/api/d1/d84/classInteger.html"
						>integer</link>, <link to="/support/api/d9/d31/classBoolean.html"
						>boolean</link>, <link
						to="/support/api/d9/d07/group__Core__Types__BuiltIn.html">etc</link>) which
					allows to you define actions that accept external data of a narrow set of types.
				</p>
			</subchapter>
			
			<subchapter title="Testing the packages">
				<p> Phoebius framework is <b>testable</b>, because being a true-OO
					application it minimizes the coupling between classes and packages and provides
					the <b>ability to mock any object</b> that is passed even into the framework
					internals. It is possible to integrate unit testing and examine a separate
					packages of Phoebius and an application based on Phoebius because of the great
					cohesion of interfaces; it is also possible to replace the contextual objects
					(e.g. IWebRequest, IWebResponse) with your own implementations that produce
					custom results, log and check the calls and do much more. </p>
			</subchapter>

		</chapter>

		<chapter title="Meta-programming">
			
			<subchapter title="Dealing with the complexity">
				<p> Phoebius framework helps the developers to solve the tasks in context of project
					domain abstracting away from database tables and entries. This dramatically
					increases the development process, due the logic of the code becomes simpler
					minimizing the number of bugs and reducing the time required for debugging. </p>
				<p>Project domain is the set of entities and their properties that describes a
					subject operated by a project. Entity is represented by an obvious PHP class
					that contains private properties of various types and the corresponding getters
					and setters. From now the development of an application becomes truly
					application programming, but not a low-level programming: you operate the
					essences of the real world instead of manipulating the database records.</p>
			</subchapter>

			<subchapter title="Code generation">
				<p> The project domain is used as a subject when generating the classes that
					implement lots of typical tasks varying from project to project: <ul>
						<li>
							<link to="/support/api/d1/d44/classEntityQuery.html">querying
								entities</link> against the used storage (typically, it is a RDBMS)
							and transparently mapping classes to the database schema of any
							complexity;</li>
						<li>processing user input with automated forms that check incoming data
							against filters and then transparently map it to entities;</li>
						<li>making a typification of incoming data from any source (e.g. XML to
							entities);</li>
						<li>generating the standard websites with CRUD (create-read-update-delete)
							operations over defined essences.</li>
					</ul>
				</p>
			</subchapter>

			<subchapter title="Scalability">
				<p> Phoebius ORM abstracts away from the database records, giving only the PHP
					objects to a developer: project domain entities are classes, entity
					properties are classes too. Therefore the ability to implement different
					patterns of development becomes important. ORM itself can transparently map
					different database schemes to an obvious PHP classes: <ol>
						<li> a column or even a set of columns to a class </li>
						<li> foreign keys (computed even by the set of columns) to an entity (1:1
							relation) </li>
						<li> future version will support containers to an entry collections (both
							1:* and *:* relations are supported and transparently handled by the
							framework from scratch) </li>
					</ol>
				</p>
			</subchapter>
			
		</chapter>
		
		<chapter title="Application Logic">
			<p> Phoebius MVC subsystem has an architecture similar to the ASP.NET MVC. By default it
				provides a ready-to-use toolset to make request handlers splitted into separate
				actions with automated casting of incoming parameters to even complex objects. </p>
			<p> Separation of application logic and presentation is achieved by simple PHP-embed
				template engine - a simplified ASP.NET System.Web.UI implementation, which is able
				to link markup scripts with classes. </p>
			<p> Routing package aims to provide a unified ability to rewrite and map requests to
				eliminate a necessity of using different webserver-specific tools (Apache
				mod_rewrite, nginx config, etc). It is needed to make a development process less
				obscure by using the object-oriented interface which features the independence from
				the environment (and thus the simplicity of deployment), possibility to test request
				matches, ability to create complex criteria of matching the requests (e.g. closures,
				etc), and implicitly map incoming data to classes. Moreover, it has a close
				integration with MVC so you can route requests directly to MVC actions/commands.
			</p>
		</chapter>
	</chapters>
</document>
